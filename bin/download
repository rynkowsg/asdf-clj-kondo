#!/usr/bin/env bash

###
#  Script used to download package by 'install' command
#
#  Standalone usage:
#
#    ASDF_INSTALL_VERSION=2023.12.15 ASDF_DOWNLOAD_PATH=tmp-downloads ./bin/download
#
#  To see debug logs use env var `DEBUG=true`.
###

#set -euo pipefail

CURRENT_SCRIPT_PATH=${BASH_SOURCE[0]}
PLUGIN_DIR=$(dirname "$(dirname "${CURRENT_SCRIPT_PATH}")")

# shellcheck source=./lib/common.bash
source "${PLUGIN_DIR}/lib/common.bash" # CURL_OPTS, GH_REPO, TOOL_NAME
# shellcheck source=./lib/log.bash
source "${PLUGIN_DIR}/lib/log.bash" # log_debug log_info is_debug
# shellcheck source=./lib/trap.bash
source "${PLUGIN_DIR}/lib/trap.bash" # add_on_exit

linux_id() {
  # shellcheck disable=SC2002
  cat /etc/os-release | grep -w ID | cut -d '=' -f 2
}

compose_download_url() {
  local version="$1"

  local platform_uname platform
  platform_uname="$(uname -s)"
  case "${platform_uname}" in
    Linux*)
      if [ "$(linux_id)" == "alpine" ]; then
        platform="linux-static"
      else
        platform="linux"
      fi
      ;;
    Darwin*) platform="darwin" ;;
    *) fail "Platform \"${platform_uname}\" is not yet supported." ;;
  esac

  local uname_arch arch
  uname_arch="$(uname -m)"
  case "${uname_arch}" in
    x86_64) arch="amd64" ;;
    *) fail "Architecture \"${uname_arch}\" is not yet supported." ;;
  esac
  # possible values:
  # https://stackoverflow.com/questions/45125516/possible-values-for-uname-m

  # releases: https://github.com/clj-kondo/clj-kondo/releases
  # sample URL: https://github.com/clj-kondo/clj-kondo/releases/download/v2023.12.15/clj-kondo-2023.12.15-linux-amd64.zip
  local download_url="${GH_REPO}/releases/download/v${version}/${TOOL_NAME}-${version}-${platform}-${arch}.zip"
  printf "%s" "${download_url}"
}

download_release() {
  local version="$1"
  local dest="$2"

  # prepare temp directory
  local temp_dir
  temp_dir=$(mktemp -d -t "asdf-${TOOL_NAME}.XXXX")
  add_on_exit rm -rf "${temp_dir}"
  log_debug "Temporary directory created at ${temp_dir}"

  # download zip & sha
  log_info
  log_info "* Downloading ${TOOL_NAME} release ${version}..."
  local zip_url sha_url
  zip_url="$(compose_download_url "${version}")"
  sha_url="${zip_url}.sha256"
  log_info " - ${zip_url}"
  log_info " - ${sha_url}"
  local temp_zip_path="${temp_dir}/${TOOL_NAME}.zip"
  local temp_sha_path="${temp_dir}/${TOOL_NAME}.zip.sha256"
  curl "${CURL_OPTS[@]}" -o "${temp_zip_path}" -C - "${zip_url}" || fail "Could not download ${zip_url}"
  curl "${CURL_OPTS[@]}" -o "${temp_sha_path}" -C - "${sha_url}" || fail "Could not download ${sha_url}"

  # verify sha
  log_info
  if echo "$(cat "${temp_sha_path}") ${temp_zip_path}" | sha256sum --check >/dev/null 2>&1; then
    log_info "* Verification successful: The file is intact."
  else
    log_info "* Verification failed: The file's integrity is compromised. Try do download ${TOOL_NAME} again."
    fail "Installation terminated due to integrity check failure."
  fi

  # move the downloaded file to final destination
  mkdir -p "${dest}"
  local unzip_opts=(-o "${temp_zip_path}" -d "${dest}")
  ! is_debug && unzip_opts=(-q "${unzip_opts[@]}")
  unzip "${unzip_opts[@]}" || fail "Could not extract ${temp_zip_path}"

  log_info "* Downloading ${TOOL_NAME} release ${version}... DONE"
}

main() {
  [ -z "${ASDF_DOWNLOAD_PATH+x}" ] && fail "ASDF_DOWNLOAD_PATH is required"
  [ -z "${ASDF_INSTALL_VERSION+x}" ] && fail "ASDF_INSTALL_VERSION is required"

  log_debug "ASDF_DOWNLOAD_PATH: ${ASDF_DOWNLOAD_PATH}"
  log_debug "ASDF_INSTALL_VERSION: ${ASDF_INSTALL_VERSION}"
  log_debug "TOOL_NAME: ${TOOL_NAME}"

  download_release "${ASDF_INSTALL_VERSION}" "${ASDF_DOWNLOAD_PATH}"
}

main "$@"
